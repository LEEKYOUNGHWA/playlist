name: Deploy to Oracle VM

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: leekyounghwa/playlist
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GA Runner)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (to ghcr.io)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/leekyounghwa/playlist:latest
          file: ./Dockerfile
          # ✅ Dockerfile의 ENV 변수에 값을 전달하기 위해 'secrets:' 대신 'build-args:' 사용
          build-args: |
            YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}
            YOUTUBE_PLAYLIST_ID=${{ secrets.YOUTUBE_PLAYLIST_ID }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} # 오타 수정 (secrets.POSTGRES_PASSWORD)

      # ✅ 1. docker-compose.yml 파일을 VM으로 전송하는 별도의 스텝 추가
      #    이전에는 이 명령어가 SSH 스크립트 안에 있어서 제대로 실행되지 않았습니다.
      - name: Upload docker-compose.yml to Oracle VM
        uses: appleboy/scp-action@master # SCP 액션을 사용하여 파일 전송
        with:
          host: ${{ secrets.ORACLE_VM_IP }}
          username: "ubuntu"
          key: ${{ secrets.ORACLE_SSH_KEY }}
          source: "./docker-compose.yml" # GitHub Actions Runner에 있는 docker-compose.yml
          target: "/home/ubuntu/playlist/" # VM의 목적지 경로

      - name: Deploy to Oracle VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_VM_IP }}
          username: "ubuntu"
          key: ${{ secrets.ORACLE_SSH_KEY }}
          script: |
            # ✅ 2. 배포 디렉토리로 이동합니다.
            APP_DIR="/home/ubuntu/playlist" 
            mkdir -p $APP_DIR # 폴더가 없을 경우 대비
            cd $APP_DIR
            
            # ✅ 3. .env 파일을 GitHub Secrets에서 가져와 생성합니다.
            #    이 파일은 docker-compose.yml과 같은 디렉토리에 있어야 Docker Compose가 인식합니다.
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> .env
            echo "YOUTUBE_PLAYLIST_ID=${{ secrets.YOUTUBE_PLAYLIST_ID }}" >> .env
            
            # ✅ 4. VM에서 ghcr.io에 로그인하여 Docker 이미지를 pull할 수 있도록 합니다.
            sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            
            # ✅ 5. Docker Compose를 사용하여 최신 이미지를 풀(pull)하고 컨테이너를 재시작합니다.
            sudo docker-compose down || true # 기존 컨테이너 중지 (에러 무시)
            sudo docker-compose pull 
            echo "Waiting for postgres-db to be ready..."
            sleep 10 # PostgreSQL 컨테이너가 시작될 시간을 충분히 줍니다.
            
            sudo docker-compose up -d 
