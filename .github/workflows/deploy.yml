name: Deploy to Oracle VM

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: leekyounghwa/playlist
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GA Runner)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (to ghcr.io)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/leekyounghwa/playlist:latest
          file: ./Dockerfile
          secrets: |
            "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}"
            "YOUTUBE_PLAYLIST_ID=${{ secrets.YOUTUBE_PLAYLIST_ID }}"
            "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" 
            "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" 

      - name: Deploy to Oracle VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_VM_IP }}
          username: "ubuntu"
          key: ${{ secrets.ORACLE_SSH_KEY }}
          script: |
            # ✅ 1. 배포 디렉토리로 이동합니다.
            APP_DIR="/home/ubuntu/playlist" 
            mkdir -p $APP_DIR
            cd $APP_DIR
            
            # ✅ 2. .env 파일을 GitHub Secrets에서 가져와 생성합니다.
            #    데이터베이스 관련 환경 변수도 명시적으로 추가하여 Docker Compose가 인식하게 합니다.
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> .env
            echo "YOUTUBE_PLAYLIST_ID=${{ secrets.YOUTUBE_PLAYLIST_ID }}" >> .env
            
            # ✅ 3. GitHub Actions Runner에서 VM으로 docker-compose.yml 파일 전송
            #    이 단계는 이미 워크플로우에 있습니다.
            scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./docker-compose.yml ubuntu@${{ secrets.ORACLE_VM_IP }}:$APP_DIR/

            # ✅ 4. VM에서 ghcr.io에 로그인하여 Docker 이미지를 pull할 수 있도록 합니다.
            sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            
            # ✅ 5. Docker Compose를 사용하여 최신 이미지를 풀(pull)하고 컨테이너를 재시작합니다.
            sudo docker-compose down || true 
            sudo docker-compose pull 
            echo "Waiting for postgres-db to be ready..."
            sleep 10 # PostgreSQL 컨테이너가 시작될 시간을 충분히 줍니다.
            
            sudo docker-compose up -d 
